generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SELLER
  BUYER
  AGENT
  PHOTOGRAPHER
  LAWYER
}

enum PropertyType {
  SALE
  RENT
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PENDING
  SOLD
  RENTED
}

enum ViewingStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum LaundryLevel {
  LOWER_LEVEL
  MAIN_LEVEL
  UPPER_LEVEL
}

enum FurnishedType {
  FURNISHED
  UNFURNISHED
  PARTIALLY
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  auth0Id        String     @unique
  name           String?
  role           UserRole   @default(BUYER)
  phoneNumber    String?
  properties     Property[]  // Properties listed by the user
  viewings       Viewing[]  // Property viewings requested by the user
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Property {
  id                String   @id @default(cuid())
  status            String
  listingType       String
  addressStreet     String
  addressCity       String
  addressProvince   String
  addressPostalCode String
  addressUnit       String?
  propertyType      String
  propertyStyle     String?
  numberOfBedrooms  Int
  numberOfBathrooms Float
  price             Float
  description       String   @db.Text
  images            String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Image {
  id          String    @id @default(uuid())
  url         String
  property    Property  @relation(fields: [propertyId], references: [id])
  propertyId  String
  isMain      Boolean   @default(false)
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
}

model Viewing {
  id          String        @id @default(uuid())
  property    Property      @relation(fields: [propertyId], references: [id])
  propertyId  String
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  status      ViewingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Message {
  id          String    @id @default(uuid())
  content     String    @db.Text
  sender      User      @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User      @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String
  property    Property? @relation(fields: [propertyId], references: [id])
  propertyId  String?
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}